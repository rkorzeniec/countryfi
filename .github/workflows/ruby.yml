name: Ruby

env:
  RUBY_VERSION: 2.7

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  rubocop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      
      - name: Install Rubocop
        run: |
          gem install --no-doc rubocop
          gem install --no-doc rubocop-rails
          gem install --no-doc rubocop-rspec
          gem install --no-doc rubocop-performance
          gem install --no-doc rubocop-md
      
      - name: Check code
        run: rubocop
  
  rspec:
    needs: rubocop
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v1
      
      - name: Setup ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      
      - name: Install mysql client
        run: sudo apt-get install mysql-server

      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      
      - name: Check mysql installation
        run: |
          sudo apt-get install -y mysql-client libmysqlclient-dev
          mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports[3306] }} -uroot -proot -e "SHOW GRANTS FOR 'root'@'localhost'"
          mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports[3306] }} -uroot -proot mysql
      
      - name: Install dependent libraries
        run: |
          sudo apt-get install libpq-dev
          gem install --no-doc bundler

      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Install dependencies
        run: yarn

      - name: prepare environment
        run: |
          cp config/database.yml.ci config/database.yml
          cp .env.ci .env
      
      - name: create database
        env:
          RAILS_ENV: test
          DB_USER: root
          DB_PASSWORD: root
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: bin/rails db:prepare
      
      - name: run tests
        run: COVERAGE=true bundle exec rspec  --require rails_helper
        env:
          DB_USER: root
          DB_PASSWORD: root
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
      
      # - name: Upload coverage results    
      #   uses: actions/upload-artifact@master
      #   if: always()
      #   with:
      #     name: coverage-report
      #     path: coverage
