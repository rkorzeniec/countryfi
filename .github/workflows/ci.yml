name: CI

env:
  RUBY_VERSION: 3.0

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}-ci
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.gitRef.outputs.sha }}
          persist-credentials: false

      - name: Read .ruby-version
        run: echo "##[set-output name=RUBY_VERSION;]$(cat .ruby-version)"
        id: ruby_version

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "${{ steps.ruby_version.outputs.RUBY_VERSION }}"
          bundler-cache: true

      - name: Cache ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn packages
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - name: Install dependent libraries
        run: |
          sudo apt-get install libpq-dev

      - name: Yarn install
        run: yarn install --frozen-lockfile --non-interactive

      - name: Prepare environment
        run: |
          cp config/database.yml.ci config/database.yml
          cp .env.ci .env

      - name: Create database
        env:
          RAILS_ENV: test
          DB_USER: root
          DB_PASSWORD: root
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          bin/rails db:create
          bin/rails db:schema:load
          bin/rails db:migrate

      - name: Run tests
        run: COVERAGE=true bundle exec rspec  --require rails_helper
        env:
          DB_USER: root
          DB_PASSWORD: root
          DB_PORT: ${{ job.services.mysql.ports[3306] }}

      - name: Upload coverage results
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: coverage-report
          path: coverage

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.gitRef.outputs.sha }}
          persist-credentials: false

      - name: Read .ruby-version
        run: echo "##[set-output name=RUBY_VERSION;]$(cat .ruby-version)"
        id: ruby_version

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "${{ steps.ruby_version.outputs.RUBY_VERSION }}"
          bundler-cache: true

      - name: rubocop
        run: bundle exec rubocop

      - name: brakeman
        run: bundle exec brakeman
