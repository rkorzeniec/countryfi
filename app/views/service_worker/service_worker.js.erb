const CACHE_VERSION = 'v0.1.1';
const CACHE_NAME = CACHE_VERSION + ':sw-cache-countrify';
const REQUIRED_FILES = [
  '<%= profile_path %>',
  '<%= offline_path %>',
  '/favicon.ico',
  '/favicon-16x16.png',
  '/favicon-32x32.png',
  '<%= asset_pack_path 'application.css' %>',
  '<%= asset_pack_path 'media/webfonts/fa-regular-400.woff2' %>',
];

const onInstall = (event) => {
  console.log('[Serviceworker]', "Installing!", event);

  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(REQUIRED_FILES))
      .then(() => self.skipWaiting())
  );
}

const onActivate = (event) => {
  console.log('[Serviceworker]', "Activating!", event);

  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames
            .filter((cacheName) => cacheName.indexOf(CACHE_VERSION) !== 0)
            .map((cacheName) => caches.delete(cacheName))
      );
    })
  );

  event.waitUntil(self.clients.claim());
}

// Borrowed from https://github.com/TalAter/UpUp
const onFetch = (event) => {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function() {
      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function(response) {
        if (response) { return response; }

        if (event.request.mode === 'navigate' || (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          console.log('[Serviceworker]', "Fetching offline content", event);
          return caches.match('/offline');
        }
      })
    })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
